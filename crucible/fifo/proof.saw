let alloc_init ty v = do {
    p <- crucible_alloc ty;
    crucible_points_to p v;
    return p;
};

let ptr_to_fresh n ty = do {
    x <- crucible_fresh_var n ty;
    p <- alloc_init ty (crucible_term x);
    return (x, p);
};

let miter_setup = do {
  let pkt_num_v = crucible_term {{ 16 : [32] }};

  x2 <- crucible_fresh_var "pkt2" (llvm_int 32);
  x3 <- crucible_fresh_var "pkt3" (llvm_int 32);
  x4 <- crucible_fresh_var "pkt4" (llvm_int 32);
  x5 <- crucible_fresh_var "pkt5" (llvm_int 32);
  x6 <- crucible_fresh_var "pkt6" (llvm_int 32);
  x7 <- crucible_fresh_var "pkt7" (llvm_int 32);
  x8 <- crucible_fresh_var "pkt8" (llvm_int 32);
  x9 <- crucible_fresh_var "pkt0" (llvm_int 32);
  x10 <- crucible_fresh_var "pkt10" (llvm_int 32);
  x11 <- crucible_fresh_var "pkt11" (llvm_int 32);
  x12 <- crucible_fresh_var "pkt12" (llvm_int 32);
  x13 <- crucible_fresh_var "pkt13" (llvm_int 32);
  x14 <- crucible_fresh_var "pkt14" (llvm_int 32);
  x15 <- crucible_fresh_var "pkt15" (llvm_int 32);

  pkt_arr_p <- crucible_alloc (llvm_array 16 (llvm_int 32));

  crucible_points_to (crucible_elem pkt_arr_p 0) (crucible_term {{ 0 : [32] }});
  crucible_points_to (crucible_elem pkt_arr_p 1) pkt_num_v;
  crucible_points_to (crucible_elem pkt_arr_p 2) (crucible_term x2);
  crucible_points_to (crucible_elem pkt_arr_p 3) (crucible_term x3);
  crucible_points_to (crucible_elem pkt_arr_p 4) (crucible_term x4);
  crucible_points_to (crucible_elem pkt_arr_p 5) (crucible_term x5);
  crucible_points_to (crucible_elem pkt_arr_p 6) (crucible_term x6);
  crucible_points_to (crucible_elem pkt_arr_p 7) (crucible_term x7);
  crucible_points_to (crucible_elem pkt_arr_p 8) (crucible_term x8);
  crucible_points_to (crucible_elem pkt_arr_p 9) (crucible_term x9);
  crucible_points_to (crucible_elem pkt_arr_p 10) (crucible_term x10);
  crucible_points_to (crucible_elem pkt_arr_p 11) (crucible_term x11);
  crucible_points_to (crucible_elem pkt_arr_p 12) (crucible_term x12);
  crucible_points_to (crucible_elem pkt_arr_p 13) (crucible_term x13);
  crucible_points_to (crucible_elem pkt_arr_p 14) (crucible_term x14);
  crucible_points_to (crucible_elem pkt_arr_p 15) (crucible_term x15);

  crucible_execute_func [pkt_arr_p, pkt_num_v];

  crucible_return (crucible_term {{ 0 : [32] }});
};

let main : TopLevel () = do {
  m <- llvm_load_module "miter.bc";
  time (crucible_llvm_verify m "miter" [] false miter_setup z3);
  print "Done";
};

main;
