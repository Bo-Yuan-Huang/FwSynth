lm_ref <- llvm_load_module "ref.bc";
lm_tem <- llvm_load_module "tem.bc";

let PKT_WID = 32; 
let PHY_WID = 64;
let SYN_NUM = 2;
let ADDR_WID = 32;

let SymExecTem pkt_num = do {
  let PKT_NUM = eval_int {{ pkt_num }};
  let PHY_NUM = eval_int {{ pkt_num >> 1 }};
  let PKT_SYM = eval_int {{ pkt_num - 2 }};
  let BYTE_CNT = eval_int {{ pkt_num * 4 }};

  let pkt_0 = {{ 0 : [PKT_WID] }};
  pkt_sym <- fresh_symbolic "pkt_sym" {| [PKT_SYM][PKT_WID] |};
  let pkt_arr = {{ [pkt_0, pkt_num] # pkt_sym }};

  let syn_arr = {{ [0x00000000, 0x00000000] }};

  let allocs = [ ("pkt_arr", PKT_NUM), ("TX_FIFO_BUFF", PHY_NUM), ("syn_arr", SYN_NUM) ];
  let inputs = [ ("*pkt_arr", pkt_arr, PKT_NUM), ("pkt_num", pkt_num, 1), 
                 ("*syn_arr", syn_arr, SYN_NUM) ];
  let output = [ ("*TX_FIFO_BUFF", PHY_NUM) ];

  print (str_concat "SymExec tem w/ PKT_NUM = " (show ( PKT_NUM )));
  term_template <- time (llvm_symexec lm_tem "LmacTxTemplate" 
                         allocs inputs output true);
  let file_name = (str_concat (str_concat "archive/tem_" (show BYTE_CNT)) ".core");
  write_core file_name term_template;
};

let SymExecRef pkt_num = do {
  let PKT_NUM = eval_int {{ pkt_num }};
  let PHY_NUM = eval_int {{ pkt_num >> 1 }};
  let PKT_SYM = eval_int {{ pkt_num - 2 }};
  let BYTE_CNT = eval_int {{ pkt_num * 4 }};

  let pkt_0 = {{ 0 : [PKT_WID] }};
  pkt_sym <- fresh_symbolic "pkt_sym" {| [PKT_SYM][PKT_WID] |};
  let pkt_arr = {{ [pkt_0, pkt_num] # pkt_sym }};

  let allocs = [ ("pkt_arr", PKT_NUM), ("g_PHY_ARR", PHY_NUM) ];
  let inputs = [ ("*pkt_arr", pkt_arr, PKT_NUM), ("pkt_num", pkt_num, 1) ];
  let output = [ ("*g_PHY_ARR", PHY_NUM) ];

  print (str_concat "SymExec ref w/ PKT_NUM = " (show ( PKT_NUM )));
  term_reference <- time (llvm_symexec lm_ref "LmacTxReference"
                          allocs inputs output true);
  let file_name = (str_concat (str_concat "archive/ref_" (show BYTE_CNT)) ".core");
  write_core file_name term_reference;
};

let Prove pkt_num = do {
  SymExecRef pkt_num;
  SymExecTem pkt_num;

  let BYTE_CNT = eval_int {{ pkt_num * 4 }};
  let PKT_SYM = eval_int {{ pkt_num - 2 }};

  let ref_file = (str_concat (str_concat "archive/ref_" (show BYTE_CNT)) ".core");
  let tem_file = (str_concat (str_concat "archive/tem_" (show BYTE_CNT)) ".core");

  ref_term <- read_core ref_file;
  tem_term <- read_core tem_file;

  let ref_func = abstract_symbolic ref_term;
  let tem_func = abstract_symbolic tem_term;

  arg <- fresh_symbolic "arg" {| [PKT_SYM][PKT_WID] |};
  let thm = {{ ref_func arg == tem_func arg }};
  r <- time (prove z3 thm);
  print r;
};

Prove {{ 8 : [PKT_WID] }};
Prove {{ 16 : [PKT_WID] }};
Prove {{ 32 : [PKT_WID] }};
Prove {{ 64 : [PKT_WID] }};
Prove {{ 128 : [PKT_WID] }};
Prove {{ 256 : [PKT_WID] }};
Prove {{ 512 : [PKT_WID] }};

