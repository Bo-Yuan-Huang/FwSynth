lm_ref <- llvm_load_module "ref.bc";
lm_tem <- llvm_load_module "tem.bc";

let PKT_WID = 32; 
let PHY_WID = 64;
let SYN_NUM = 2;
let ADDR_WID = 32;

let SymExecTem pkt_num = do {
  let PKT_NUM = eval_int {{ pkt_num }};
  let PHY_NUM = eval_int {{ pkt_num >> 1 }};
  let PKT_SYM = eval_int {{ pkt_num - 2 }};
  let BYTE_CNT = eval_int {{ pkt_num * 4 }};

  let pkt_0 = {{ 0 : [PKT_WID] }};
  pkt_sym <- fresh_symbolic "pkt_sym" {| [PKT_SYM][PKT_WID] |};
  let pkt_arr = {{ [pkt_0, pkt_num] # pkt_sym }};

  syn_0 <- fresh_symbolic "syn_0" {| [PKT_WID] |};
  let syn_arr = {{ [syn_0, 0x00000000] }};

  let allocs = [ ("pkt_arr", PKT_NUM), ("TX_FIFO_BUFF", PHY_NUM), ("syn_arr", SYN_NUM) ];
  let inputs = [ ("*pkt_arr", pkt_arr, PKT_NUM), ("pkt_num", pkt_num, 1), 
                 ("*syn_arr", syn_arr, SYN_NUM) ];
  let output = [ ("*TX_FIFO_BUFF", PHY_NUM) ];

  print (str_concat "SymExec tem w/ PKT_NUM = " (show ( PKT_NUM )));
  term_template <- time (llvm_symexec lm_tem "LmacTxTemplate" 
                         allocs inputs output true);
  let file_name = (str_concat (str_concat "archive/syn_" (show BYTE_CNT)) ".core");
  write_core file_name term_template;
};

SymExecTem {{ 8 : [PKT_WID] }};
SymExecTem {{ 16 : [PKT_WID] }};
SymExecTem {{ 32 : [PKT_WID] }};
SymExecTem {{ 64 : [PKT_WID] }};
SymExecTem {{ 128 : [PKT_WID] }};
SymExecTem {{ 256 : [PKT_WID] }};
SymExecTem {{ 512 : [PKT_WID] }};

