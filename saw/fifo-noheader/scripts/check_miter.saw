m <- llvm_load_module "obj/miter.bc";

let PKT_WID = 32; 
let PHY_WID = 64;
let SYN_NUM = 2;
let ADDR_WID = 32;

let SymExec pkt_num = do {
  let PKT_NUM = eval_int {{ pkt_num }};
  let PHY_NUM = eval_int {{ pkt_num >> 1 }};
  let PKT_SYM = eval_int {{ pkt_num - 2 }};
  let BYTE_CNT = eval_int {{ pkt_num * 4 }};

  let pkt_0 = {{ 0 : [PKT_WID] }};
  pkt_sym <- fresh_symbolic "pkt_sym" {| [PKT_SYM][PKT_WID] |};
  let pkt_arr = {{ [pkt_0, pkt_num] # pkt_sym }};

  let allocs = [ ("pkt_arr", PKT_NUM), ("TX_FIFO_BUFF", PHY_NUM), ("g_PHY_ARR", PHY_NUM) ];
  let inputs = [ ("*pkt_arr", pkt_arr, PKT_NUM), ("pkt_num", pkt_num, 1) ];
  let output = [ ("return", 1) ];

  print (str_concat "SymExec miter w/ PKT_NUM = " (show ( PKT_NUM )));
  term_miter <- time (llvm_symexec m "miter" allocs inputs output true);
  let file_name = (str_concat (str_concat "archive/miter_" (show BYTE_CNT)) ".core");
  write_core file_name term_miter;
};

let Check pkt_num = do {
  SymExec pkt_num;

  let BYTE_CNT = eval_int {{ pkt_num * 4 }};
  let PKT_SYM = eval_int {{ pkt_num - 2 }};

  let miter_file = (str_concat (str_concat "archive/miter_" (show BYTE_CNT)) ".core");

  miter_term <- read_core miter_file;

  let miter_func = abstract_symbolic miter_term;

  r <- time (prove z3 {{ miter_term == 0 }});
  print r;
};

