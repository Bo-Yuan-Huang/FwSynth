let solver = z3;


let no_sat_found = 
  do {
    print "No SAT assignment found. Synthesis failed.";
    return false;
  };


let export_result result = 
  do {
    write_core "archive/result.core" result;
    print "Synthesis result written to result.core";
    return true;
  };


let process_inp_arg_from_failed_proof examples cex =
  do {
    print "Dummy binding for recursive call";
    return false;
  };


let process_syn_var_from_sat_query examples cex = 
  do {
    let fixed_syn_var = fix_syn_var cex;
    let conjecture = {{ ~fixed_syn_var || (reference == template) }};

    r <- time (prove solver conjecture);
    print r;

    status <- caseProofResult r (export_result conjecture) 
                                (process_inp_arg_from_failed_proof examples);

    return status;
  };


let process_inp_arg_from_failed_proof examples cex = 
  do {
    let concretized_reference = concretize_reference cex;
    let concretized_template = concretize_template cex;
    let partial_spec = {{ concretized_reference == concretized_template }};
    let new_examples = {{ partial_spec && examples }};

    r <- time (sat z3 {{ new_examples }});
    print r;

    status <- caseSatResult r no_sat_found (process_syn_var_from_sat_query examples);

    return status;
  };


let process_syn_var_from_initial_sat examples cex =
  do {
    let fixed_syn_var = fix_syn_var_initial cex;
    let conjecture = {{ ~(fixed_syn_var) || (reference == template) }};

    r <- time (prove solver conjecture);
    print r;

    status <- caseProofResult r (export_result conjecture) (process_inp_arg_from_failed_proof examples);

    return status;
  };

let main : TopLevel () = do {
  r <- time (sat z3 {{ reference == template }});
  print r;

  caseSatResult r no_sat_found (process_syn_var_from_initial_sat {{ True }});

  print "Done";
};
